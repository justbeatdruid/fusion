---
apiVersion: v1
kind: Service
metadata:
  name: fusion-etcd
  namespace: default
  labels:
    app: fusion-etcd
    version: v0.1-alpha
spec:
  type: ClusterIP
  ports:
    - name: service
      port: 2379
      protocol: TCP
      targetPort: 2379
  selector:
    app: fusion-etcd
    version: v0.1-alpha
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: fusion-etcd
    version: v0.1-alpha
  name: fusion-etcd
  namespace: default
spec:
  replicas: 3
  selector:
    matchLabels:
      app: fusion-etcd
      version: v0.1-alpha
  serviceName: fusion-etcd
  template:
    metadata:
      labels:
        app: fusion-etcd
        version: v0.1-alpha
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - fusion-etcd
              - key: version
                operator: In
                values:
                - v0.1-alpha
            topologyKey: "kubernetes.io/hostname"
      serviceAccount: fusion-etcd
      containers:
      - command:
          - "/bin/sh"
          - "-ec"
          - |
            HOSTNAME=$(hostname)
            AUTH_OPTIONS=""
            # store member id into PVC for later member replacement
            collect_member() {                
                while ! etcdctl $AUTH_OPTIONS member list > /dev/null 2>&1; do sleep 1; done
                etcdctl $AUTH_OPTIONS member list | grep http://${HOSTNAME}.${SET_NAME}:2380 | cut -d ',' -f1 > /var/run/etcd/member_id
                exit 0
            }

            eps() {
                EPS=""
                for i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do
                    EPS="${EPS}${EPS:+,}http://${SET_NAME}-${i}.${SET_NAME}:2379"
                done
                echo ${EPS}
            }

            member_hash() {
                etcdctl $AUTH_OPTIONS member list | grep http://${HOSTNAME}.${SET_NAME}:2380 | cut -d ',' -f1
            }

            # we should wait for other pods to be up before trying to join
            # otherwise we got "no such host" errors when trying to resolve other members
            for i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do
                while true; do
                    echo "Waiting for ${SET_NAME}-${i}.${SET_NAME} to come up"
                    ping -W 1 -c 1 ${SET_NAME}-${i}.${SET_NAME} > /dev/null && break
                    sleep 1s
                done                
            done
            
            # re-joining after failure?
            if [ -e /var/run/etcd/default.etcd && -e /var/run/etcd/member_id ]; then
                echo "Re-joining etcd member"
                member_id=$(cat /var/run/etcd/member_id)

                # re-join member
                ETCDCTL_ENDPOINT=$(eps) etcdctl $AUTH_OPTIONS member update ${member_id} http://${HOSTNAME}.${SET_NAME}:2380 | true
                exec etcd --name ${HOSTNAME} \
                    --listen-peer-urls http://0.0.0.0:2380 \
                    --listen-client-urls http://0.0.0.0:2379\
                    --advertise-client-urls http://${HOSTNAME}.${SET_NAME}:2379 \
                    --data-dir /var/run/etcd/default.etcd
                    
            fi

            # etcd-SET_ID
            SET_ID=${HOSTNAME##*[^0-9]}

            # adding a new member to existing cluster (assuming all initial pods are available)
            if [ "${SET_ID}" -ge ${INITIAL_CLUSTER_SIZE} ]; then
                export ETCDCTL_ENDPOINT=$(eps)

                # member already added?
                MEMBER_HASH=$(member_hash)
                if [ -n "${MEMBER_HASH}" ]; then
                    # the member hash exists but for some reason etcd failed
                    # as the datadir has not be created, we can remove the member
                    # and retrieve new hash
                    etcdctl $AUTH_OPTIONS member remove ${MEMBER_HASH}
                fi

                echo "Adding new member"
                etcdctl $AUTH_OPTIONS member add ${HOSTNAME} http://${HOSTNAME}.${SET_NAME}:2380 | grep "^ETCD_" > /var/run/etcd/new_member_envs

                if [ $? -ne 0 ]; then
                    echo "Exiting"
                    rm -f /var/run/etcd/new_member_envs
                    exit 1
                fi

                cat /var/run/etcd/new_member_envs
                source /var/run/etcd/new_member_envs

                collect_member &

                exec etcd --name ${HOSTNAME} \
                    --listen-peer-urls http://0.0.0.0:2380 \
                    --listen-client-urls http://0.0.0.0:2379 \
                    --advertise-client-urls http://${HOSTNAME}.${SET_NAME}:2379 \
                    --data-dir /var/run/etcd/default.etcd \
                    --initial-advertise-peer-urls http://${HOSTNAME}.${SET_NAME}:2380 \
                    --initial-cluster ${ETCD_INITIAL_CLUSTER} \
                    --initial-cluster-state ${ETCD_INITIAL_CLUSTER_STATE}
                    
            fi

            PEERS=""
            for i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do
                PEERS="${PEERS}${PEERS:+,}${SET_NAME}-${i}=http://${SET_NAME}-${i}.${SET_NAME}:2380"
            done

            collect_member &

            # join member
            exec etcd --name ${HOSTNAME} \
                --initial-advertise-peer-urls http://${HOSTNAME}.${SET_NAME}:2380 \
                --listen-peer-urls http://0.0.0.0:2380 \
                --listen-client-urls http://0.0.0.0:2379 \
                --advertise-client-urls http://${HOSTNAME}.${SET_NAME}:2379 \
                --initial-cluster-token etcd-cluster-1 \
                --initial-cluster ${PEERS} \
                --initial-cluster-state new \
                --data-dir /var/run/etcd/default.etcd
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: INITIAL_CLUSTER_SIZE
          value: "3"
        - name: SET_NAME
          value: fusion-etcd
        image: registry.cmcc.com/library/quay.io/coreos/etcd:v3.3.10
        imagePullPolicy: IfNotPresent
        name: fusion-etcd
        ports:
        - containerPort: 2380
          name: peer
        - containerPort: 2379
          name: client
        #resources:
        #  requests:
        #    cpu: 0.1
        #    memory: 100Mi
        volumeMounts:
        - name: datadir
          mountPath: /var/run/etcd
  volumeClaimTemplates:
  - metadata:
      name: datadir
    spec:
      accessModes:
        - "ReadWriteOnce"
      storageClassName: nfs-client
      resources:
        requests:
          # upstream recommended max is 700M
          storage: "1Gi"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fusion-etcd
  namespace: default
  labels:
    app: fusion-etcd
    version: v0.1-alpha
