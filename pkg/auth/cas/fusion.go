package cas

import (
	"fmt"

	"github.com/chinamobile/nlpt/pkg/logs"

	"github.com/parnurzeal/gorequest"
	"k8s.io/klog"
)

const getUserPath = "fusion-auth/sys/support/userInfo/%s"
const listUserPath = "fusion-auth/sys/support/userList"
const listTenantPath = "fusion-auth/sys/support/groupList"

type FusionAutoGenerated struct {
	Msg  string     `json:"msg"`
	Code int        `json:"code"`
	User FusionUser `json:"user"`
}

type FusionUserList struct {
	Msg  string       `json:"msg"`
	Code int          `json:"code"`
	Page []FusionUser `json:"page"`
}

type FusionUser struct {
	CreateUserID      int    `json:"create_user_id"`
	Salt              string `json:"salt"`
	CreateTime        string `json:"create_time"`
	LastLoginTime     string `json:"last_login_time"`
	Mobile            string `json:"mobile"`
	LastGroupID       int    `json:"last_group_id"`
	UUID              string `json:"uuid"`
	EmployeeCode      string `json:"employee_code"`
	CreateUserAccount string `json:"create_user_account"`
	Password          string `json:"password"`
	AccountID         string `json:"account_id"`
	UserID            int    `json:"user_id"`
	Account           string `json:"account"`
	Email             string `json:"email"`
	Username          string `json:"username"`
	Status            int    `json:"status"`
}

type FusionTenantList struct {
	Msg  string         `json:"msg"`
	Code int            `json:"code"`
	Page []FusionTenant `json:"page"`
}

type FusionTenant struct {
	TenantID         string `json:"tenant_id"`
	CreateUserID     int    `json:"create_user_id"`
	CreateTime       string `json:"create_time"`
	GroupName        string `json:"group_name"`
	ManagerID        int    `json:"manager_id"`
	GroupUUID        string `json:"group_uuid"`
	ID               int    `json:"id"`
	Remake           string `json:"remake"`
	SyncTime         string `json:"sync_time"`
	OrganizationCode string `json:"organization_code"`
}

func FromFusionUser(c FusionUser) User {
	return User{
		UserID:     c.UserID,
		Username:   c.Username,
		Password:   c.Password,
		Status:     c.Status,
		Email:      c.Email,
		Mobile:     c.Mobile,
		CreateTime: c.CreateTime,
	}
}

func FromFusionUserList(c []FusionUser) []User {
	ul := make([]User, len(c))
	for i, u := range c {
		ul[i] = FromFusionUser(u)
	}
	return ul
}

func FromFusionTenant(c FusionTenant) Tenant {
	return Tenant{
		TenantID:   c.ID,
		TenantName: c.GroupName,
		CreatedAt:  c.CreateTime,
		UpdatedAt:  c.SyncTime,
	}
}

func FromFusionTenantList(c []FusionTenant) []Tenant {
	tl := make([]Tenant, len(c))
	for i, t := range c {
		tl[i] = FromFusionTenant(t)
	}
	return tl
}

type fusion struct{}

func NewFusionOperator() Operator {
	return &fusion{}
}

func (*fusion) GetUserByID(id string) (User, error) {
	if true {
		return User{}, fmt.Errorf("unsupported")
	}
	request := gorequest.New().SetLogger(logs.GetGoRequestLogger(6)).SetDebug(true).SetCurlCommand(true)
	schema := "http"
	request = request.Get(fmt.Sprintf("%s://%s:%d/%s", schema, casHost, casPort, fmt.Sprintf(getUserPath, id)))

	responseBody := &FusionAutoGenerated{}
	response, body, errs := request.EndStruct(responseBody)
	if len(errs) > 0 {
		return User{}, fmt.Errorf("request for getting tenant user error: %+v", errs)
	}
	if response.StatusCode/100 != 2 {
		klog.V(5).Infof("create operation failed: %d %s", response.StatusCode, string(body))
		return User{}, fmt.Errorf("request for getting tenant user error: receive wrong status code: %s", string(body))
	}
	if responseBody.Code != 0 {
		return User{}, fmt.Errorf("request for getting tenant user error: received cod is not 200: message: %s", responseBody.Msg)
	}
	return FromFusionUser(responseBody.User), nil
}

func (*fusion) ListUsers() ([]User, error) {
	request := gorequest.New().SetLogger(logs.GetGoRequestLogger(6)).SetDebug(true).SetCurlCommand(true)
	schema := "http"
	request = request.Get(fmt.Sprintf("%s://%s:%d/%s", schema, casHost, casPort, listUserPath)).Query("page=0").Query("limit=999999")

	responseBody := &FusionUserList{}
	response, body, errs := request.EndStruct(responseBody)
	if len(errs) > 0 {
		return nil, fmt.Errorf("request for getting tenant user error: %+v", errs)
	}
	if response.StatusCode/100 != 2 {
		klog.V(5).Infof("create operation failed: %d %s", response.StatusCode, string(body))
		return nil, fmt.Errorf("request for getting tenant user error: receive wrong status code: %s", string(body))
	}
	if responseBody.Code != 0 {
		return nil, fmt.Errorf("request for getting tenant user error: received cod is not 200: message: %s", responseBody.Msg)
	}
	return FromFusionUserList(responseBody.Page), nil
}

func (*fusion) GetTenantByID(id string) (Tenant, error) {
	return Tenant{}, fmt.Errorf("unsupported")
}

func (*fusion) ListTenants() ([]Tenant, error) {
	request := gorequest.New().SetLogger(logs.GetGoRequestLogger(6)).SetDebug(true).SetCurlCommand(true)
	schema := "http"
	request = request.Get(fmt.Sprintf("%s://%s:%d/%s", schema, casHost, casPort, listTenantPath))

	responseBody := &FusionTenantList{}
	response, body, errs := request.EndStruct(responseBody)
	if len(errs) > 0 {
		return nil, fmt.Errorf("request for getting tenant user error: %+v", errs)
	}
	if response.StatusCode/100 != 2 {
		klog.V(5).Infof("create operation failed: %d %s", response.StatusCode, string(body))
		return nil, fmt.Errorf("request for getting tenant user error: receive wrong status code: %s", string(body))
	}
	if responseBody.Code != 0 {
		return nil, fmt.Errorf("request for getting tenant user error: received cod is not 200: message: %s", responseBody.Msg)
	}
	return FromFusionTenantList(responseBody.Page), nil
}
