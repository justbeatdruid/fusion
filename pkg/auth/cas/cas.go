package cas

import (
	"fmt"

	"github.com/chinamobile/nlpt/pkg/logs"

	"github.com/parnurzeal/gorequest"
	"k8s.io/klog"
)

var (
	casHost string
	casPort int
)

const path = "cas/user"
const listPath = "cas/user/list"

type CasAutoGenerated struct {
	Timestamp int64  `json:"timestamp"`
	Status    int    `json:"status"`
	Error     string `json:"error"`
	Exception string `json:"exception"`
	Message   string `json:"message"`
	Path      string `json:"path"`

	Code int     `json:"code"`
	Data CasUser `json:"data"`
	Desc string  `json:"desc"`
}

type CasUser struct {
	UserID      int    `json:"userId"`
	Username    string `json:"username"`
	Password    string `json:"password"`
	Salt        string `json:"salt"`
	Status      int    `json:"status"`
	Email       string `json:"email"`
	Mobile      string `json:"mobile"`
	Description string `json:"description"`
}

type CasUserList struct {
	Timestamp int64  `json:"timestamp"`
	Status    int    `json:"status"`
	Error     string `json:"error"`
	Exception string `json:"exception"`
	Message   string `json:"message"`
	Path      string `json:"path"`

	Code int       `json:"code"`
	Data []CasUser `json:"data"`
	Desc string    `json:"desc"`
}

func FromCasUser(c CasUser) User {
	return User{
		UserID:      c.UserID,
		Username:    c.Username,
		Password:    c.Password,
		Salt:        c.Salt,
		Status:      c.Status,
		Email:       c.Email,
		Mobile:      c.Mobile,
		Description: c.Description,
	}
}

func FromCasUserList(c []CasUser) []User {
	ul := make([]User, len(c))
	for i, u := range c {
		ul[i] = FromCasUser(u)
	}
	return ul
}

type cas struct{}

func NewCasOperator() Operator {
	return &cas{}
}

func (*cas) GetUserByID(id string) (User, error) {
	request := gorequest.New().SetLogger(logs.GetGoRequestLogger(6)).SetDebug(true).SetCurlCommand(true)
	schema := "http"
	request = request.Get(fmt.Sprintf("%s://%s:%d/%s", schema, casHost, casPort, path)).Query(fmt.Sprintf("userId=%s", id))

	responseBody := &CasAutoGenerated{}
	response, body, errs := request.EndStruct(responseBody)
	if len(errs) > 0 {
		return User{}, fmt.Errorf("request for getting cas user error: %+v", errs)
	}
	if response.StatusCode/100 != 2 {
		klog.V(5).Infof("create operation failed: %d %s", response.StatusCode, string(body))
		return User{}, fmt.Errorf("request for getting cas user error: receive wrong status code: %s", string(body))
	}
	if responseBody.Code != 200 || responseBody.Status == 500 {
		return User{}, fmt.Errorf("request for getting cas user error: received cod is not 200: desc: %s; error: %s; exception: %s; msg: %s", responseBody.Desc, responseBody.Error, responseBody.Exception, responseBody.Message)
	}
	return FromCasUser(responseBody.Data), nil
}

func (*cas) ListUsers() ([]User, error) {
	request := gorequest.New().SetLogger(logs.GetGoRequestLogger(6)).SetDebug(true).SetCurlCommand(true)
	schema := "http"
	request = request.Get(fmt.Sprintf("%s://%s:%d/%s", schema, casHost, casPort, listPath)).Query("page=0").Query("limit=999999")

	responseBody := &CasUserList{}
	response, body, errs := request.EndStruct(responseBody)
	if len(errs) > 0 {
		return nil, fmt.Errorf("request for getting cas user error: %+v", errs)
	}
	if response.StatusCode/100 != 2 {
		klog.V(5).Infof("create operation failed: %d %s", response.StatusCode, string(body))
		return nil, fmt.Errorf("request for getting cas user error: receive wrong status code: %s", string(body))
	}
	if responseBody.Code != 200 || responseBody.Status == 500 {
		return nil, fmt.Errorf("request for getting cas user error: received cod is not 200: desc: %s; error: %s; exception: %s; msg: %s", responseBody.Desc, responseBody.Error, responseBody.Exception, responseBody.Message)
	}
	return FromCasUserList(responseBody.Data), nil
}
